/* globals componentHandler */

'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});
exports['default'] = attributes;
function upgradeElement(element) {
	if (process.browser && componentHandler) {
		componentHandler.upgradeElement(element);
	}
}

function attributes(_ref, noupgrade) {
	var id = _ref.id;
	var ripple = _ref.ripple;
	var primary = _ref.primary;
	var primaryDark = _ref.primaryDark;
	var active = _ref.active;
	var disabled = _ref.disabled;
	var large = _ref.large;
	var shadow = _ref.shadow;
	var config = _ref.config;

	var attr = {};
	attr['class'] = [];
	attr['class'].toString = function () {
		return attr['class'].join(' ');
	};

	/* Some common attributes to transfer and set */
	if (id) attr.id = id;
	if (disabled) attr.disabled = true;
	if (large) attr['class'].push('mdl-layout--large-screen-only');
	if (ripple) attr['class'].push('mdl-js-ripple-effect');
	if (active) attr['class'].push('is-active');
	if (primary) attr['class'].push('mdl-color--primary');
	if (primaryDark) attr['class'].push('mdl-color--primary-dark');
	if (shadow) attr['class'].push('mdl-shadow--' + shadow + 'dp');
	if (arguments[0]['class']) attr['class'].push(arguments[0]['class']);

	/* Keep all event handlers */
	for (var prop in arguments[0]) {
		if (prop.substring(0, 2) === 'on') attr[prop] = arguments[0][prop];
	}

	/* Try to upgrade all elements and also run a config attribute if passed */
	attr.config = function (e, isInitialized) {
		if (config) config.apply(undefined, arguments);

		if (!isInitialized && !noupgrade) upgradeElement(e);
	};

	return attr;
}

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hdHRyaWJ1dGVzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7cUJBUXdCLFVBQVU7QUFObEMsU0FBUyxjQUFjLENBQUMsT0FBTyxFQUFFO0FBQ2hDLEtBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxnQkFBZ0IsRUFBRTtBQUN2QyxrQkFBZ0IsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7RUFDekM7Q0FDRDs7QUFFYyxTQUFTLFVBQVUsQ0FBQyxJQUEyRSxFQUFFLFNBQVMsRUFBRTtLQUF2RixFQUFFLEdBQUgsSUFBMkUsQ0FBMUUsRUFBRTtLQUFFLE1BQU0sR0FBWCxJQUEyRSxDQUF0RSxNQUFNO0tBQUUsT0FBTyxHQUFwQixJQUEyRSxDQUE5RCxPQUFPO0tBQUUsV0FBVyxHQUFqQyxJQUEyRSxDQUFyRCxXQUFXO0tBQUUsTUFBTSxHQUF6QyxJQUEyRSxDQUF4QyxNQUFNO0tBQUUsUUFBUSxHQUFuRCxJQUEyRSxDQUFoQyxRQUFRO0tBQUUsS0FBSyxHQUExRCxJQUEyRSxDQUF0QixLQUFLO0tBQUUsTUFBTSxHQUFsRSxJQUEyRSxDQUFmLE1BQU07S0FBRSxNQUFNLEdBQTFFLElBQTJFLENBQVAsTUFBTTs7QUFDNUcsS0FBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ2QsS0FBSSxTQUFNLEdBQUcsRUFBRSxDQUFDO0FBQ2hCLEtBQUksU0FBTSxDQUFDLFFBQVEsR0FBRztTQUFNLElBQUksU0FBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7RUFBQSxDQUFDOzs7QUFHakQsS0FBRyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFDcEIsS0FBRyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDbEMsS0FBRyxLQUFLLEVBQUUsSUFBSSxTQUFNLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUM7QUFDM0QsS0FBRyxNQUFNLEVBQUUsSUFBSSxTQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDbkQsS0FBRyxNQUFNLEVBQUUsSUFBSSxTQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3hDLEtBQUcsT0FBTyxFQUFFLElBQUksU0FBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ2xELEtBQUcsV0FBVyxFQUFFLElBQUksU0FBTSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0FBQzNELEtBQUcsTUFBTSxFQUFFLElBQUksU0FBTSxDQUFDLElBQUksa0JBQWdCLE1BQU0sUUFBSyxDQUFDO0FBQ3RELEtBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFNLEVBQUUsSUFBSSxTQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBTSxDQUFDLENBQUM7OztBQUczRCxNQUFJLElBQUksSUFBSSxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUM3QixNQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ2xFOzs7QUFHRCxLQUFJLENBQUMsTUFBTSxHQUFHLFVBQVMsQ0FBQyxFQUFFLGFBQWEsRUFBRTtBQUN4QyxNQUFHLE1BQU0sRUFBRSxNQUFNLGtCQUFJLFNBQVMsQ0FBQyxDQUFDOztBQUVoQyxNQUFHLENBQUMsYUFBYSxJQUFJLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNuRCxDQUFDOztBQUVGLFFBQU8sSUFBSSxDQUFDO0NBQ1oiLCJmaWxlIjoic3JjL2F0dHJpYnV0ZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIGNvbXBvbmVudEhhbmRsZXIgKi9cblxuZnVuY3Rpb24gdXBncmFkZUVsZW1lbnQoZWxlbWVudCkge1xuXHRpZihwcm9jZXNzLmJyb3dzZXIgJiYgY29tcG9uZW50SGFuZGxlcikge1xuXHRcdGNvbXBvbmVudEhhbmRsZXIudXBncmFkZUVsZW1lbnQoZWxlbWVudCk7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXR0cmlidXRlcyh7aWQsIHJpcHBsZSwgcHJpbWFyeSwgcHJpbWFyeURhcmssIGFjdGl2ZSwgZGlzYWJsZWQsIGxhcmdlLCBzaGFkb3csIGNvbmZpZ30sIG5vdXBncmFkZSkge1xuXHRsZXQgYXR0ciA9IHt9O1xuXHRhdHRyLmNsYXNzID0gW107XG5cdGF0dHIuY2xhc3MudG9TdHJpbmcgPSAoKSA9PiBhdHRyLmNsYXNzLmpvaW4oJyAnKTtcblxuXHQvKiBTb21lIGNvbW1vbiBhdHRyaWJ1dGVzIHRvIHRyYW5zZmVyIGFuZCBzZXQgKi9cblx0aWYoaWQpIGF0dHIuaWQgPSBpZDtcblx0aWYoZGlzYWJsZWQpIGF0dHIuZGlzYWJsZWQgPSB0cnVlO1xuXHRpZihsYXJnZSkgYXR0ci5jbGFzcy5wdXNoKCdtZGwtbGF5b3V0LS1sYXJnZS1zY3JlZW4tb25seScpO1xuXHRpZihyaXBwbGUpIGF0dHIuY2xhc3MucHVzaCgnbWRsLWpzLXJpcHBsZS1lZmZlY3QnKTtcblx0aWYoYWN0aXZlKSBhdHRyLmNsYXNzLnB1c2goJ2lzLWFjdGl2ZScpO1xuXHRpZihwcmltYXJ5KSBhdHRyLmNsYXNzLnB1c2goJ21kbC1jb2xvci0tcHJpbWFyeScpO1xuXHRpZihwcmltYXJ5RGFyaykgYXR0ci5jbGFzcy5wdXNoKCdtZGwtY29sb3ItLXByaW1hcnktZGFyaycpO1xuXHRpZihzaGFkb3cpIGF0dHIuY2xhc3MucHVzaChgbWRsLXNoYWRvdy0tJHtzaGFkb3d9ZHBgKTtcblx0aWYoYXJndW1lbnRzWzBdLmNsYXNzKSBhdHRyLmNsYXNzLnB1c2goYXJndW1lbnRzWzBdLmNsYXNzKTtcblxuXHQvKiBLZWVwIGFsbCBldmVudCBoYW5kbGVycyAqL1xuXHRmb3IobGV0IHByb3AgaW4gYXJndW1lbnRzWzBdKSB7XG5cdFx0aWYocHJvcC5zdWJzdHJpbmcoMCwgMikgPT09ICdvbicpIGF0dHJbcHJvcF0gPSBhcmd1bWVudHNbMF1bcHJvcF07XG5cdH1cblxuXHQvKiBUcnkgdG8gdXBncmFkZSBhbGwgZWxlbWVudHMgYW5kIGFsc28gcnVuIGEgY29uZmlnIGF0dHJpYnV0ZSBpZiBwYXNzZWQgKi9cblx0YXR0ci5jb25maWcgPSBmdW5jdGlvbihlLCBpc0luaXRpYWxpemVkKSB7XG5cdFx0aWYoY29uZmlnKSBjb25maWcoLi4uYXJndW1lbnRzKTtcblxuXHRcdGlmKCFpc0luaXRpYWxpemVkICYmICFub3VwZ3JhZGUpIHVwZ3JhZGVFbGVtZW50KGUpO1xuXHR9O1xuXG5cdHJldHVybiBhdHRyO1xufVxuIl19
